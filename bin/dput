#!/usr/bin/env bash

set -euo pipefail

options=$(getopt -o '' --long package:,release:,prefix:,pparoot: -- "$@")
[ $? -eq 0 ] || {
    echo "Incorrect option provided"
    exit 1
}

package_filter='.*'
release_filter='.*'
prefix=springjp
pparoot='ppa:jonpspri/containers-multiarch'


eval set -- "$options"

while true; do
  case "$1" in
    --package) shift; package_filter=$1;;
    --release) shift; release_filter=$1;;
    --prefix) shift; prefix=$1;;
    --pparoot) shift; pparoot=$1;;
    --) shift; break;;
  esac
  shift
done

scriptdir=$(realpath "$(dirname -- $0)")
jq -r --arg package_filter "${package_filter}" \
  --arg release_filter "${release_filter}" \
  -f ${scriptdir}/meta_reader.jq \
  "${scriptdir}/../meta/builds.json" \
| while read line
do
  #shellcheck disable=SC2064
  trap "rm -r /tmp/src.$$ >/dev/null" EXIT

  declare git_repository source_package git_ref releases
  eval ${line}

  #  Retreive the actual hash for the reference, so fresh builds are triggered
  #  if some inconsiderate programmer has moved a tag or committed to a branch.
  echo "Retreiving git repository for ${source_package} ${git_ref}"
  git clone ${git_repository} /tmp/src.$$
  git -C /tmp/src.$$ config advice.detachedHead false
  git_hash=$(git -C /tmp/src.$$ show-ref -s ${git_ref})
  git -C /tmp/src.$$ checkout ${git_hash}
  version=$(gsed -n '1s/^.*(\s*\([-0-9\.]*\)[~)\s].*$/\1/p' /tmp/src.$$/debian/changelog)
  rm -r /tmp/src.$$

  for release_string in ${releases}; do
    IFS=':' read -r release _ <<< ${release_string}
    echo '------------------------------------------------------------'
    echo "Putting ${prefix}/${source_package}:${version}_${release} to ${pparoot}... "
    #
    #  Upload the latest to the launchpad maintenance site.
    #
    docker run --rm \
      ${prefix}/${source_package}:${version}_${release} \
      sh -c "dput --unchecked ${pparoot} /debs/*_source.changes "
    echo '------------------------------------------------------------'
  done
done
